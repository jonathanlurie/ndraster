{"version":3,"file":"ndraster.es.js","sources":["../src/NdRaster.js","../src/index.js"],"sourcesContent":["\n/* global BigUint64Array, BigInt64Array */\n/* eslint no-undef: \"error\" */\n\nconst DEFAULT = {\n  dtype: 'float64',\n  copy: false,\n}\n\n\nconst DTYPE_TO_TYPEDARRAY_CONSTRUCTOR = {\n  uint8: Uint8Array,\n  int8: Int8Array,\n  uint16: Uint16Array,\n  int16: Int16Array,\n  uint32: Uint32Array,\n  int32: Int32Array,\n  uint64: BigUint64Array,\n  int64: BigInt64Array,\n  float32: Float32Array,\n  float64: Float64Array,\n}\n\nclass NdRaster {\n  /**\n   * @constructor\n   * @param {Array|Uint8Array|Int8Array|Uint16Array|Int16Array|Uint32Array|Int32Array|BigUint64Array|BigInt64Array|Float32Array|Float64Array} data - can be a generic Array or one of the typedArray.\n   * If it is a generic Array, the values will be copied in a typed array (default dtype or dtype in the options object).\n   * If it is a typed array, a reference will be used and the values will not be copied, unless `options.copy` is explicitelly set to true or `options.dtype` does not matchc the type of the provided data.\n   * @param {Object} options - the options object\n   * @param {string} options.dtype - the data type to enforce the data to be. Must be one of 'uint8', 'int8', 'uint16', 'int16', 'uint32', 'int32', 'uint64', 'int64', 'float32', 'float64' (default: 'float64')\n   * @param {boolean} options.copy - if false, the inner data of the NdRaster instance will be a reference (unless another dtype is provided). If true, the data will be deep copied (default: false)\n   * @param {Array} options.shape - the shape to provide to the data, important to interpret the data as a multi-dimensional dataset.\n   *        Example: shape must be like [number, number, number] for a 3D matrix, where the first element is the size of the slowest dimension\n   *                 and the last element is the size of the fastest dimension. Numpy refers to this as the 'C' order, in opposition to the 'F' (Fortran) order.\n   *                 This order is also the default order used in Numpy.\n   *                 (default: single dimension of the size of the provided array)\n   */\n  constructor(arr, options = {}) {\n    const providedDtype = 'dtype' in options ? options.dtype : null\n    const copy = 'copy' in options ? (!!options.copy) : false\n    let shape = 'shape' in options ? options.shape : null\n\n    this.data = null\n    this.dtype = null\n    this.shape = null\n    this.strides = null\n\n    // if dtype provided in option but not valid, we throw an Error\n    if (providedDtype && !NdRaster.isValidDtype(providedDtype)) {\n      throw new Error(`The value ${providedDtype} is not a valid dtype.`)\n    }\n\n    const guessedDtype = NdRaster.guessDtype(arr)\n    const dtypeToUse = providedDtype ? providedDtype : DEFAULT.dtype\n    const DtypeConstructor = DTYPE_TO_TYPEDARRAY_CONSTRUCTOR[dtypeToUse]\n    const isGenericArray = NdRaster.isGenericArray(arr)\n\n    if (isGenericArray\n    || guessedDtype !== dtypeToUse\n    || copy) {\n      let arrData = arr\n\n      // if a generic Array is provided, it could be a nested array\n      if (isGenericArray) {\n        const arrConfig = NdRaster.flattenNestedArray(arr)\n        arrData = arrConfig.array\n\n        // if no shape is provided, then we use the shape deduced by the flattening\n        if (!shape) {\n          shape = arrConfig.shape\n        }\n      }\n\n      this.data = new DtypeConstructor(arrData)\n      this.dtype = dtypeToUse\n    } else if (guessedDtype) {\n      this.data = new DtypeConstructor(arr)\n      this.dtype = dtypeToUse\n    } else {\n      throw new Error('The provided data array is not valid.')\n    }\n\n    if (shape) {\n      this.setShape(shape)\n    } else {\n      this.setShape([this.data.length])\n    }\n  }\n\n\n  /**\n   * Define the shape of the data.\n   * @param {Array} shape - the shape to provide to the data, important to interpret the data as a multi-dimensional dataset.\n   *        Example: shape must be like [number, number, number] for a 3D matrix, where the first element is the size of the slowest dimension\n   *                 and the last element is the size of the fastest dimension. Numpy refers to this as the 'C' order, in opposition to the 'F' (Fortran) order.\n   *                 This order is also the default order used in Numpy.\n   *                 (default: single dimension of the size of the provided array)\n   */\n  setShape(shape) {\n    let total = 1\n\n    if (!Array.isArray(shape)) {\n      throw new Error('The shape must be an Array')\n    }\n\n    for (let i = 0; i < shape.length; i += 1) {\n      total *= shape[i]\n    }\n\n    if (total !== this.data.length) {\n      throw new Error('The shape does not match the size of the data. All the elements of the shape multiplied must be the total number of element in the data.')\n    }\n\n    this.shape = shape.slice()\n    this.strides = new Array(shape.length).fill(0)\n    this.strides[this.shape.length - 1] = 1\n\n    for (let i = this.shape.length - 2; i >= 0; i -= 1) {\n      this.strides[i] = this.shape[i + 1] * this.strides[i + 1]\n    }\n  }\n\n\n  /**\n   * @static\n   * Tells if a dtype is valid\n   * @param {string} dtype - a dtype as a string\n   * @returns {boolean}\n   */\n  static isValidDtype(dtype) {\n    return dtype in DTYPE_TO_TYPEDARRAY_CONSTRUCTOR\n  }\n\n\n  /**\n   * @static\n   * Tells the dtype of the given array. If no dtype is found, `null`  is returned.\n   * @param {*} arr - Some value that may or may not be a typed array\n   * @returns {string|null}\n   */\n  static guessDtype(arr) {\n    const dtypes = Object.keys(DTYPE_TO_TYPEDARRAY_CONSTRUCTOR)\n    for (let i = 0; i < dtypes.length; i += 1) {\n      const dtype = dtypes[i]\n      if (arr instanceof DTYPE_TO_TYPEDARRAY_CONSTRUCTOR[dtype]) {\n        return dtype\n      }\n    }\n    return null\n  }\n\n\n  /**\n   * @static\n   * Tells if a value is of type Array.\n   * Note: this function will return false if the value is a typed array\n   * @param {*} arr\n   */\n  static isGenericArray(arr) {\n    return (arr instanceof Array)\n  }\n\n  /**\n   * Get the shape of a nested array. A nested array is a generic Array that contains other arrays\n   * such as [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]] which a a 2D array of dimension ('C' ordered) [4, 3]\n   * @param {Array} arr - the potentially multidimensional nested array\n   * @returns {Array|null} Return a dimension array where the first element is the size of the slowest varying dimension\n   * and the last element is the fastest varying dimension. Returns null if the array is not valid\n   */\n  static getNestedArrayShape(arr) {\n    const shape = []\n\n    if (!Array.isArray(arr)) {\n      throw new Error('The value provided is not an Array')\n    }\n\n    let arrDigger = arr\n\n    while (Array.isArray(arrDigger)) {\n      const len = arrDigger.length\n      if (len === 0) {\n        throw new Error('An empty array cannot be used as data.')\n      }\n      shape.push(len)\n      arrDigger = arrDigger[0]\n    }\n\n    return shape\n  }\n\n\n  /**\n   * Flattens a nested Array and get the shape\n   * @param {Array} arr - a potentially nested Array\n   * @returns {Object} like {array: Array, shape: Array}\n   */\n  static flattenNestedArray(arr) {\n    const shape = NdRaster.getNestedArrayShape(arr)\n    const array = arr.flat(shape.length)\n    const expectedLength = shape.reduce((a, b) => a * b)\n\n    // this ensures that all the element in a given dimension have the same size\n    if (expectedLength !== array.length) {\n      throw new Error('The provided nested Array has size inconsistencies.')\n    }\n\n    return {\n      array,\n      shape,\n    }\n  }\n}\n\nexport default NdRaster\n","import NdRaster from './NdRaster'\n\nexport default ({\n  NdRaster,\n})\n"],"names":[],"mappings":"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"}